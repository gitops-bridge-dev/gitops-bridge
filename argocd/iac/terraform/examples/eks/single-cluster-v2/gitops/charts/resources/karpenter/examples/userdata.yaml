registry: "https://registry-1.docker.io"
registryCache: "true"
registryHost: "http://registry"

userData: |
  CLUSTER_NAME={{ $.Values.clusterName }}
  INSTANCEGROUP={{ .value.nodeGroupLabel | default .key }}
  INSTANCE_ID=`/usr/bin/ec2-metadata --instance-id | awk '{print $2}'`
  ID_SUFFIX=`/usr/bin/ec2-metadata --instance-id | awk '{print substr($0,length-5,6)}'`
  HOSTNAME="${CLUSTER_NAME}-${INSTANCEGROUP}-$ID_SUFFIX"
  hostname $HOSTNAME
  echo $HOSTNAME > /etc/hostname
  aws ec2 create-tags --resources $INSTANCE_ID --tags=Key=Name,Value=$HOSTNAME
  sed -i "s/127.0.0.1 [0-9a-z-]*\s*localhost/127.0.0.1 $HOSTNAME localhost/" /etc/hosts
  # Sysctl changes
  ## Disable IPv6
  cat <<EOF > /etc/sysctl.d/10-disable-ipv6.conf
  # disable ipv6 config
  net.ipv6.conf.all.disable_ipv6 = 1
  net.ipv6.conf.default.disable_ipv6 = 1
  net.ipv6.conf.lo.disable_ipv6 = 1
  EOF
  ## Stolen from this guy: https://blog.codeship.com/running-1000-containers-in-docker-swarm/
  cat <<EOF > /etc/sysctl.d/99-kube-net.conf
  # Have a larger connection range available
  net.ipv4.ip_local_port_range=1024 65000
  # Reuse closed sockets faster
  net.ipv4.tcp_tw_reuse=1
  net.ipv4.tcp_fin_timeout=15
  # The maximum number of "backlogged sockets".  Default is 128.
  net.core.somaxconn=4096
  net.core.netdev_max_backlog=4096
  # 16MB per socket - which sounds like a lot,
  # but will virtually never consume that much.
  net.core.rmem_max=16777216
  net.core.wmem_max=16777216
  # Various network tunables
  net.ipv4.tcp_max_syn_backlog=20480
  net.ipv4.tcp_max_tw_buckets=400000
  net.ipv4.tcp_no_metrics_save=1
  net.ipv4.tcp_rmem=4096 87380 16777216
  net.ipv4.tcp_syn_retries=2
  net.ipv4.tcp_synack_retries=2
  net.ipv4.tcp_wmem=4096 65536 16777216
  #vm.min_free_kbytes=65536
  # Connection tracking to prevent dropped connections (usually issue on LBs)
  net.netfilter.nf_conntrack_max=262144
  net.ipv4.netfilter.ip_conntrack_generic_timeout=120
  net.netfilter.nf_conntrack_tcp_timeout_established=86400
  # ARP cache settings for a highly loaded docker swarm
  net.ipv4.neigh.default.gc_thresh1=8096
  net.ipv4.neigh.default.gc_thresh2=12288
  net.ipv4.neigh.default.gc_thresh3=16384
  EOF
  systemctl restart systemd-sysctl.service
  #Increase RegistryQPS
  echo "$(jq '.registryPullQPS=100' /etc/kubernetes/kubelet/kubelet-config.json)" > /etc/kubernetes/kubelet/kubelet-config.json
  echo "$(jq '.registryBurst=200' /etc/kubernetes/kubelet/kubelet-config.json)" > /etc/kubernetes/kubelet/kubelet-config.json
  {{- if eq ( .value.registryCache | default $.Values.registryCache ) "true" }}
  mkdir -p /etc/containerd/certs.d/docker.io
  cat<<EOF>/etc/containerd/certs.d/docker.io/hosts.toml
  server = "{{ .value.registry | default $.Values.registry }}"
  [host."{{ .value.registryHost | default $.Values.registryHost }}"]
    capabilities = ["pull", "resolve"]
    skip_verify = true
  EOF
  {{- end }}
